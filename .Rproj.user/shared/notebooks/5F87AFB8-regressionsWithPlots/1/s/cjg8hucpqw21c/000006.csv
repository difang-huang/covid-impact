"0",""
"0","DML2.for.PLM <- function(x, d, y, dreg, yreg, nfold=2) {"
"0","nobs <- nrow(x)"
"0","foldid <- rep.int(1:nfold,times = ceiling(nobs/nfold))[sample.int(nobs)]"
"0","I <- split(1:nobs, foldid)"
"0","ytil <- dtil <- rep(NA, nobs)"
"0","cat(""fold: "")"
"0","#the following loop builds residuals over the folds"
"0","for(b in 1:length(I)){"
"0","dfit <- dreg(x[-I[[b]],], d[-I[[b]]]) #take a fold out"
"0","yfit <- yreg(x[-I[[b]],], y[-I[[b]]]) # take a folot out"
"0","dhat <- predict(dfit, x[I[[b]],], type=""response"") #predict the fold out"
"0","yhat <- predict(yfit, x[I[[b]],], type=""response"") #predict the fold out"
"0","dtil[I[[b]]] <- (d[I[[b]]] - dhat) #record residual"
"0","ytil[I[[b]]] <- (y[I[[b]]] - yhat) #record residial"
"0","cat(b,"" "")"
"0","}"
"0","rfit <- lm(ytil ~ dtil) #estimate the main parameter by regressing one residual on the other"
"0","coef.est <- coef(rfit)[2] #extract coefficient"
"0","se <- sqrt(vcovHC(rfit)[2,2]) #record standard error"
"0","cat(sprintf(""\ncoef (se) = %g (%g)\n"", coef.est , se))"
"0","return( list(coef.est =coef.est , se=se, dtil=dtil, ytil=ytil) )"
"0","}"
"0",""
"0","library(AER,hdm, randomForest)"
"2","Error in library(AER, hdm, randomForest) : 
  object 'randomForest' not found
"
